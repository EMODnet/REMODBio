paste0(aphiaid, collapse="%5C%2C"), '%29')
aphiapart <- paste0("(",aphiapart1, "+OR+",aphiapart2, ")")
}
if (!is.na(endyear) & is.na(startyear)) { startyear = 1850}
if (is.na(endyear)& !is.na(startyear)) { endyear = format(Sys.Date(), "%Y")}
if (!is.na(startyear) & !is.na(endyear)) {
yearcollectedpart <- paste0("%28%28yearcollected+BETWEEN+%27+",startyear, "%27+AND+%27" , endyear,"%27%29%29") }
middlepart <- paste0(
if (exists("datasetpart")) {datasetpart} ,
if (exists("datasetpart") & exists("aphiapart")) {paste0("+AND+", aphiapart)} else {
if ( !exists("datasetpart") & exists("aphiapart")) {aphiapart}} ,
if ( exists("aphiapart") & exists("yearcollectedpart")) {paste0("+AND+",yearcollectedpart)} else {
if (!exists("datasetpart") & !exists("aphiapart") & exists("yearcollectedpart")) {yearcollectedpart}}
)
wfsurl <-  paste0(wfsprefix, middlepart, wfssuffix)
}
return(wfsurl)
}
test <- createwfsurls(dasid = c("1884","618", "5780" ), aphiaid = "2036", startyear = "1980", endyear = "2010")
test
test [1]
getwd()
document()
setwd("..")
install("REMODBio")
rm(list = ls())
test <- REMODBio::createwfsurls(dasid = c("1884","618", "5780" ), aphiaid = "2036", startyear = "1980", endyear = "2010")
rm(list = ls())
test <- REMODBio::getemodnetbiodata(dasid = c("1884","618", "5780" ), aphiaid = "2036", startyear = "1980", endyear = "2010")
test <- REMODBio::getemodbiodata(dasid = c("1884","618", "5780" ), aphiaid = "2036", startyear = "1980", endyear = "2010")
install("REMODBio")
library(odbc)
library(dplyr)
library(reshape2)
library(knitr)
library(rmarkdown)
dasid <- "499"
setwd("H:/") #the exportfolder (a subforlder metadatasubmit will be created here)
conn <- odbcConnectAccess("S:/algemeen/DATABASES/metasubmit_v180910.accde")
library(RODBC)
conn <- odbcConnectAccess("S:/algemeen/DATABASES/metasubmit_v180910.accde")
conn <-odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=metasubmit_v180910.accde")
conn <-odbcDriverConnect("Driver={Microsoft Access Driver (*.accdb)};DBQ=metasubmit_v180910.accde")
conn <-odbcDriverConnect("Driver={Microsoft Access Driver (*.accdb)};DBQ=S:/algemeen/DATABASES/metasubmit_v180910.accde")
?odbcDriverConnect
conn <-odbcDriverConnect("S:/algemeen/DATABASES/metasubmit_v180910.accde")
conn <-odbcDriverConnect('S:/algemeen/DATABASES/metasubmit_v180910.accde')
conn <-odbcDriverConnect('S:/algemeen/DATABASES/metasubmit_v180910.accde', Driver={Microsoft Access Driver (*.accde)})
conn <-odbcDriverConnect(paste("Driver=Microsoft Access Driver (*.accde)","DBQ=S:/algemeen/DATABASES/metasubmit_v180910.accde", "ReadOnly=False", sep = ";" )
)
dcon <- dbConnect(odbc::odbc(), "S:/algemeen/DATABASES/metasubmit_v180910.accde")
getwd()
setwd('S:/algemeen/DATABASES/')
getwd()
dcon <- dbConnect(odbc::odbc(), "metasubmit_v180910.accde")
accdb_con <- dbConnect(drv = odbc(), .connection_string = paste0("Driver={Microsoft Access Driver (*.mdb, *.accdb, *.accde)};DBQ=",metasubmit_v180910.accde,";"))
accdb_con <- dbConnect(drv = odbc(), .connection_string = paste0("Driver={Microsoft Access Driver (*.mdb, *.accdb, *.accde)};DBQ="metasubmit_v180910.accde";"))
accdb_con <- dbConnect(drv = odbc(), .connection_string = paste0("Driver={Microsoft Access Driver (*.mdb, *.accdb, *.accde)};DBQ=",metasubmit_v180910.accde,";"))
accdb_con <- dbConnect(drv = odbc(), .connection_string = paste0("Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=",metasubmit_v180910.accdb,";"))
accdb_con <- dbConnect(drv = odbc(), .connection_string = paste0("Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=",S:/algemeen/DATABASES/metasubmit_v180910.accde,";"))
accdb_con <- dbConnect(drv = odbc(), .connection_string = paste0("Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=",S:\algemeen\DATABASES\metasubmit_v180910.accde,";"))
accdb_con <- dbConnect(drv = odbc(), .connection_string = paste0("Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=",'S:/algemeen/DATABASES/metasubmit_v180910.accde',";"))
accdb_con <- dbConnect(drv = odbc(), .connection_string = paste0("Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=",S:/algemeen/DATABASES/metasubmit_v180910.accde,";"))
odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=S:/algemeen/DATABASES/metasubmit_v180910.accde")
test <- odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=S:/algemeen/DATABASES/metasubmit_v180910.accde")
test <- odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accde)};DBQ=S:/algemeen/DATABASES/metasubmit_v180910.accde")
library("RODBC")
db<-file.path("S:/algemeen/DATABASES/metasubmit_v180910.accde") #connect database.
channel<-odbcConnectAccess2007(db) #internal RODBC function
?dbConnect
library(DBI)
cn <- dbConnect(odbc::odbc(), dsn=db)
cn <- dbConnect(odbc::odbc(), dsn="metasubmit_v180910.accde")
> library(ODBC)
library(ODBC)
library("ODBC")
library(odbc)
test <- odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accde)};DBQ=S:/algemeen/DATABASES/metasubmit_v180910")
test <- odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accde)};DBQ=S:/algemeen/DATABASES/metasubmit_v180910")
odbcConnectAccess(db, uid = "", pwd = "", ...)
odbcConnectAccess(db)
odbcConnectDbase(db)
odbcConnect(db)
cn <- odbcConnect(db)
cn <- odbcConnect(dsn=db)
cn <- odbcConnect(dsn="metasubmit_v180910.accde")
cn <- odbcConnect(dsn="metasubmit_v180910")
cn <- odbcConnect(dsn="metasubmit_v180910.accdb")
getwd()
setwd(/Metasubmit)
setwd("/Metasubmit")
setwd("Metasubmit")
getwd()
cn <- odbcConnect(dsn="metasubmit_v180910.accdb")
cn <- odbcConnect(dsn="metasubmit_v180910.accde")
cn <- dbConnect(odbc::odbc(), dsn="metasubmit_v180910.accde")
cn <- dbConnect(odbc::odbc(), dsn="metasubmit_v180910.accdb")
test <- odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accde)};DBQ=metasubmit_v180910.accde")
conn <-odbcDriverConnect("S:/algemeen/DATABASES/Metasubmit/metasubmit_v180910.accde")
db<-"S:/algemeen/DATABASES/Metasubmit/metasubmit_v180910.accde"
db
conn <- odbcConnectAccess("S:/algemeen/DATABASES/Metasubmit/metasubmit_v180910.accde")
dbConnect ("S:/algemeen/DATABASES/Metasubmit/metasubmit_v180910.accde")
conn <- odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=S:/algemeen/DATABASES/Metasubmit/metasubmit_v180910.accde")
query_MetaSubmit <- sqlQuery(conn, "SELECT  * from query_MetaSubmit where dasid = 493")
query_MetaSubmit <- dbGetQuery(conn, "select * from [query_MetaSubmit")
query_MetaSubmit <- sqlQuery(conn, "select * from [query_MetaSubmit")
query_MetaSubmit <- sqlQuery(conn, "select * from query_MetaSubmit")
query_MetaSubmit <- sqlQuery(conn, "select * from query_MetaSubmit")
query_MetaSubmit_Attributes <- sqlQuery(conn, "select [DasID]
,[Attribute]
,[Attribute_Value] from query_MetaSubmit_Attributes")
query_MetaSubmit_GeographicalScope <- dbGetQuery(conn, "select [DasID]
,[DasGeoTerm]
,[GeotID]
,[Prefix]
,[GeoTerm] from query_MetaSubmit_GeographicalScope")
query_MetaSubmit_Measurements <- dbGetQuery(conn, "select [DasID]
,[Parameter]
,[Unit]
,[Method] from query_MetaSubmit_Measurements")
query_MetaSubmit_Ownership <- dbGetQuery(conn, "select[DasID] , [Role] from query_MetaSubmit_Ownership") # does not work ok
query_MetaSubmit_References <- dbGetQuery(conn, "select [DasID]
,[Relation]
,[BEnt_NEW] from query__MetaSubmit_References")
query_MetaSubmit_TaxonomicScope <- dbGetQuery(conn, "select [DasID]
,[IMIS_TaxtID]
,[IMIS_TaxTerm]
,[IMIS_AphiaLinkFlag]
,[IMIS_AphiaID]
,[Aphia_ID]
,[Aphia_DisplayName] from query_MetaSubmit_TaxonomicScope")
query_MetaSubmit_Attributes <- sqlQuery(conn, "select [DasID]
,[Attribute]
,[Attribute_Value] from query_MetaSubmit_Attributes")
query_MetaSubmit_GeographicalScope <- sqlQuery(conn, "select [DasID]
,[DasGeoTerm]
,[GeotID]
,[Prefix]
,[GeoTerm] from query_MetaSubmit_GeographicalScope")
query_MetaSubmit_Measurements <- sqlQuery(conn, "select [DasID]
,[Parameter]
,[Unit]
,[Method] from query_MetaSubmit_Measurements")
query_MetaSubmit_Ownership <- sqlQuery(conn, "select[DasID] , [Role] from query_MetaSubmit_Ownership") # does not work ok
query_MetaSubmit_References <- sqlQuery(conn, "select [DasID]
,[Relation]
,[BEnt_NEW] from query__MetaSubmit_References")
query_MetaSubmit_TaxonomicScope <- sqlQuery(conn, "select [DasID]
,[IMIS_TaxtID]
,[IMIS_TaxTerm]
,[IMIS_AphiaLinkFlag]
,[IMIS_AphiaID]
,[Aphia_ID]
,[Aphia_DisplayName] from query_MetaSubmit_TaxonomicScope")
dasid <- "501"
setwd("H:/") #the exportfolder (a subforlder metadatasubmit will be created here)
render("S:/algemeen/DATABASES/Metasubmit/R/readmetasubmit.Rmd", "html_document",  output_dir= paste(getwd(),"/metadatasubmit", sep="") , output_file = paste("readmetasubmit_dasid_",dasid,".html" ,sep=""))
library(RODBC)
library(dplyr)
library(reshape2)
library(knitr)
library(rmarkdown)
rm(list = ls())
dasid <- "501"
setwd("H:/") #the exportfolder (a subforlder metadatasubmit will be created here)
render("S:/algemeen/DATABASES/Metasubmit/R/readmetasubmit.Rmd", "html_document",  output_dir= paste(getwd(),"/metadatasubmit", sep="") , output_file = paste("readmetasubmit_dasid_",dasid,".html" ,sep=""))
?RODBC::odbcCloseAll()
render("S:/algemeen/DATABASES/Metasubmit/R/readmetasubmit.Rmd", "html_document",  output_dir= paste(getwd(),"/metadatasubmit", sep="") , output_file = paste("readmetasubmit_dasid_",dasid,".html" ,sep=""))
query_MetaSubmit <- query_MetaSubmit %>% filter (DasID == dasid) %>% select (-ProgID, -DasOrigID, -DasTypeID, -AccConID)
query_MetaSubmit <- query_MetaSubmit %>% filter (DasID == dasid)
query_MetaSubmit_Ownership <- query_MetaSubmit_Ownership %>% filter (DasID == dasid) %>% select (-DasID)
query_MetaSubmit_Ownership <- query_MetaSubmit_Ownership %>% filter (DasID == dasid)
query_MetaSubmit_Measurements <- query_MetaSubmit_Measurements %>% filter (DasID == dasid)
query_MetaSubmit_References <- query_MetaSubmit_References %>% filter (DasID == dasid)
query_MetaSubmit_References
View(query_MetaSubmit_References)
conn <- odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=S:/algemeen/DATABASES/Metasubmit/metasubmit_v180910.accde")
query_MetaSubmit_References <- sqlQuery(conn, "select [DasID]
,[Relation]
,[BEnt_NEW] from query__MetaSubmit_References")
View(query_MetaSubmit_References)
query_MetaSubmit_References <- sqlQuery(conn, "select [DasID]
,[Relation]
,[BEnt_NEW] from query_MetaSubmit_References")
dasid <- "501"
render("S:/algemeen/DATABASES/Metasubmit/R/readmetasubmit.Rmd", "html_document",  output_dir= paste(getwd(),"/metadatasubmit", sep="") , output_file = paste("readmetasubmit_dasid_",dasid,".html" ,sep=""))
render("S:/algemeen/DATABASES/Metasubmit/R/readmetasubmit.Rmd", "html_document",  output_dir= paste(getwd(),"/metadatasubmit", sep="") , output_file = paste("readmetasubmit_dasid_",dasid,".html" ,sep=""))
library(RODBC)
library(RODBC)
library(dplyr)
library(reshape2)
library(knitr)
library(rmarkdown)
conn <- odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=S:/algemeen/DATABASES/Metasubmit/metasubmit_v180910.accde")
query_MetaSubmit <- sqlQuery(conn, "select * from query_MetaSubmit")
query_MetaSubmit_Attributes <- sqlQuery(conn, "select [DasID]
,[Attribute]
,[Attribute_Value] from query_MetaSubmit_Attributes")
query_MetaSubmit_GeographicalScope <- sqlQuery(conn, "select [DasID]
,[DasGeoTerm]
,[GeotID]
,[Prefix]
,[GeoTerm] from query_MetaSubmit_GeographicalScope")
query_MetaSubmit_Measurements <- sqlQuery(conn, "select [DasID]
,[Parameter]
,[Unit]
,[Method] from query_MetaSubmit_Measurements")
query_MetaSubmit_Ownership <- sqlQuery(conn, "select * from query_MetaSubmit_Ownership")
query_MetaSubmit_Ownership <- query_MetaSubmit_Ownership %>% filter (DasID == dasid) %>% select (-DasID)
View(query_MetaSubmit_Ownership)
dasid <- "501"
render("S:/algemeen/DATABASES/Metasubmit/R/readmetasubmit.Rmd", "html_document",  output_dir= paste(getwd(),"/metadatasubmit", sep="") , output_file = paste("readmetasubmit_dasid_",dasid,".html" ,sep=""))
View(query_MetaSubmit_Ownership)
query_MetaSubmit_Ownership[1,2]
names(query_MetaSubmit_Ownership)
query_MetaSubmit_Ownership <- query_MetaSubmit_Ownership %>% filter (DasID == dasid) %>% select (-DasID) %>%
mutate (Ins_NEW = gsub("\r\n", " ", Ins_NEW))
query_MetaSubmit_Ownership <- query_MetaSubmit_Ownership %>% select (-DasID) %>%
mutate (Ins_NEW = gsub("\r\n", " ", Ins_NEW))
query_MetaSubmit_Ownership <- query_MetaSubmit_Ownership %>%
mutate (Ins_NEW = gsub("\r\n", " ", Ins_NEW))
query_MetaSubmit_Ownership[1,2]
names(query_MetaSubmit_Ownership)
render("S:/algemeen/DATABASES/Metasubmit/R/readmetasubmit.Rmd", "html_document",  output_dir= paste(getwd(),"/metadatasubmit", sep="") , output_file = paste("readmetasubmit_dasid_",dasid,".html" ,sep=""))
render("S:/algemeen/DATABASES/Metasubmit/R/readmetasubmit.Rmd", "html_document",  output_dir= paste(getwd(),"/metadatasubmit", sep="") , output_file = paste("readmetasubmit_dasid_",dasid,".html" ,sep=""))
parts<- c(if(exists(datasetpart))datasetpart , if(exists(aphiapart))aphiapart,
if(exists(mrgpart))mrgpart,if(exists(yearcollectedpart))yearcollectedpart )
parts<- c(if(exists("datasetpart"))datasetpart , if(exists("aphiapart"))aphiapart,
if(exists("mrgpart"))mrgpart,if(exists("yearcollectedpart"))yearcollectedpart )
if(!is.null(parts)){
middlepart <- paste0(parts, collapse="+AND+")} else {
middlepart <- NA
}
createwfsurls <- function (geourl = NA, dasid = NA, aphiaid = NA, mrgid = NA,  startyear = NA, endyear = NA, type="full") {
if (type == "full") {
geolayer = "eurobis-obisenv"
} else if (type == "basic") {
geolayer = "eurobis-obisenv_basic"
}
offset <-seq(from = 0, to =  100000000, by = 20000)
if(any(is.na(geourl)) & any(is.na(dasid)) & any(is.na(aphiaid))) {print("please provide geourl dasid or aphiaid")
} else {
# http://geo.vliz.be/geoserver/wfs/ows?service=WFS&version=1.1.0&request=GetFeature&typeName=Dataportal:eurobis-obisenv&resultType=results&viewParams= order: ORDER BY obs.id LIMIT 20000 OFFSET 0 ;where:datasetid IN (5885);context:0100&outputFormat=csv
wfsprefix <-paste0("http://geo.vliz.be/geoserver/wfs/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=Dataportal%3A",geolayer,"&viewParams=%20order:%20ORDER%20BY%20obs.id%20LIMIT%20", offset[2] ,"%20OFFSET%20", trimws(format(offset,digits=9)) ,"%20;where:")
if(!is.na(geourl)) {
if (any(grepl("propertyName", geourl))) {
wfssuffix <- paste0("+AND+",sectioninstring (geourl, starchar="Params=where", n=-15, endchar = "propertyName=", m=2 ),"&outputformat=csv")} else {
wfssuffix <- paste0("+AND+",richtfrom(geourl, 'Params=where',14))
}   } else {
wfssuffix <-"&outputformat=csv"
}
if (any(!is.na(dasid)))  { datasetpart <- paste0('datasetid+IN+%28',
paste0(dasid, collapse="%5C%2C"), '%29')  }
if (any(!is.na(aphiaid))) {
aphiapart1 <- paste0('aphiaid+IN+%28',
paste0(aphiaid, collapse="%5C%2C"), '%29')
aphiapart2 <- paste0('aphiaidaccepted+IN+%28',
paste0(aphiaid, collapse="%5C%2C"), '%29')
aphiapart <- paste0("(",aphiapart1, "+OR+",aphiapart2, ")")
}
if (any(!is.na(mrgid))) {
mrgpart <- paste0('((up.geoobjectsids+&&+ARRAY[',
paste0(mrgid, collapse="%5C%2C"), ']))')
}
if (!is.na(endyear) & is.na(startyear)) { startyear = 1850}
if (is.na(endyear)& !is.na(startyear)) { endyear = format(Sys.Date(), "%Y")}
if (!is.na(startyear) & !is.na(endyear)) {
yearcollectedpart <- paste0("%28%28yearcollected+BETWEEN+%27+",startyear, "%27+AND+%27" , endyear,"%27%29%29") }
parts<- c(if(exists("datasetpart"))datasetpart , if(exists("aphiapart"))aphiapart,
if(exists("mrgpart"))mrgpart,if(exists("yearcollectedpart"))yearcollectedpart )
#### insert a paste collapse function!!!
if(!is.null(parts)){
middlepart <- paste0(parts, collapse="+AND+")} else {
middlepart <- NA
}
wfsurl <-  paste0(wfsprefix, middlepart, wfssuffix)
}
return(wfsurl)
}
test <- createwfsurls(mrgid=3315)
test <- createwfsurls("mrgid"=3315)
createwfsurls <- function (geourl = NA, dasid = NA, aphiaid = NA, mrgid = NA,  startyear = NA, endyear = NA, type="full") {
if (type == "full") {
geolayer = "eurobis-obisenv"
} else if (type == "basic") {
geolayer = "eurobis-obisenv_basic"
}
offset <-seq(from = 0, to =  100000000, by = 20000)
if(any(is.na(geourl)) & any(is.na(dasid)) & any(is.na(aphiaid)) &  any(is.na(mrgid))) {print("please provide geourl dasid or aphiaid")
} else {
# http://geo.vliz.be/geoserver/wfs/ows?service=WFS&version=1.1.0&request=GetFeature&typeName=Dataportal:eurobis-obisenv&resultType=results&viewParams= order: ORDER BY obs.id LIMIT 20000 OFFSET 0 ;where:datasetid IN (5885);context:0100&outputFormat=csv
wfsprefix <-paste0("http://geo.vliz.be/geoserver/wfs/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=Dataportal%3A",geolayer,"&viewParams=%20order:%20ORDER%20BY%20obs.id%20LIMIT%20", offset[2] ,"%20OFFSET%20", trimws(format(offset,digits=9)) ,"%20;where:")
if(!is.na(geourl)) {
if (any(grepl("propertyName", geourl))) {
wfssuffix <- paste0("+AND+",sectioninstring (geourl, starchar="Params=where", n=-15, endchar = "propertyName=", m=2 ),"&outputformat=csv")} else {
wfssuffix <- paste0("+AND+",richtfrom(geourl, 'Params=where',14))
}   } else {
wfssuffix <-"&outputformat=csv"
}
if (any(!is.na(dasid)))  { datasetpart <- paste0('datasetid+IN+%28',
paste0(dasid, collapse="%5C%2C"), '%29')  }
if (any(!is.na(aphiaid))) {
aphiapart1 <- paste0('aphiaid+IN+%28',
paste0(aphiaid, collapse="%5C%2C"), '%29')
aphiapart2 <- paste0('aphiaidaccepted+IN+%28',
paste0(aphiaid, collapse="%5C%2C"), '%29')
aphiapart <- paste0("(",aphiapart1, "+OR+",aphiapart2, ")")
}
if (any(!is.na(mrgid))) {
mrgpart <- paste0('((up.geoobjectsids+&&+ARRAY[',
paste0(mrgid, collapse="%5C%2C"), ']))')
}
if (!is.na(endyear) & is.na(startyear)) { startyear = 1850}
if (is.na(endyear)& !is.na(startyear)) { endyear = format(Sys.Date(), "%Y")}
if (!is.na(startyear) & !is.na(endyear)) {
yearcollectedpart <- paste0("%28%28yearcollected+BETWEEN+%27+",startyear, "%27+AND+%27" , endyear,"%27%29%29") }
parts<- c(if(exists("datasetpart"))datasetpart , if(exists("aphiapart"))aphiapart,
if(exists("mrgpart"))mrgpart,if(exists("yearcollectedpart"))yearcollectedpart )
#### insert a paste collapse function!!!
if(!is.null(parts)){
middlepart <- paste0(parts, collapse="+AND+")} else {
middlepart <- NA
}
wfsurl <-  paste0(wfsprefix, middlepart, wfssuffix)
}
return(wfsurl)
}
test <- createwfsurls("mrgid"=3315)
test <- createwfsurls(mrgid="3315")
tst[1]
test[1]
createwfsurls <- function (geourl = NA, dasid = NA, aphiaid = NA, mrgid = NA,  startyear = NA, endyear = NA, type="full") {
if (type == "full") {
geolayer = "eurobis-obisenv"
} else if (type == "basic") {
geolayer = "eurobis-obisenv_basic"
}
offset <-seq(from = 0, to =  100000000, by = 20000)
if(any(is.na(geourl)) & any(is.na(dasid)) & any(is.na(aphiaid)) &  any(is.na(mrgid))) {print("please provide geourl dasid or aphiaid")
} else {
# http://geo.vliz.be/geoserver/wfs/ows?service=WFS&version=1.1.0&request=GetFeature&typeName=Dataportal:eurobis-obisenv&resultType=results&viewParams= order: ORDER BY obs.id LIMIT 20000 OFFSET 0 ;where:datasetid IN (5885);context:0100&outputFormat=csv
wfsprefix <-paste0("http://geo.vliz.be/geoserver/wfs/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=Dataportal%3A",geolayer,"&viewParams=%20order:%20ORDER%20BY%20obs.id%20LIMIT%20", offset[2] ,"%20OFFSET%20", trimws(format(offset,digits=9)) ,"%20;where:")
if(!is.na(geourl)) {
if (any(grepl("propertyName", geourl))) {
wfssuffix <- paste0("+AND+",sectioninstring (geourl, starchar="Params=where", n=-15, endchar = "propertyName=", m=2 ),"&outputformat=csv")} else {
wfssuffix <- paste0("+AND+",richtfrom(geourl, 'Params=where',14))
}   } else {
wfssuffix <-"&outputformat=csv"
}
if (any(!is.na(dasid)))  { datasetpart <- paste0('datasetid+IN+%28',
paste0(dasid, collapse="%5C%2C"), '%29')  }
if (any(!is.na(aphiaid))) {
aphiapart1 <- paste0('aphiaid+IN+%28',
paste0(aphiaid, collapse="%5C%2C"), '%29')
aphiapart2 <- paste0('aphiaidaccepted+IN+%28',
paste0(aphiaid, collapse="%5C%2C"), '%29')
aphiapart <- paste0("(",aphiapart1, "+OR+",aphiapart2, ")")
}
if (any(!is.na(mrgid))) {
mrgpart <- paste0('%28%28up.geoobjectsids+&&+ARRAY%5B',
paste0(mrgid, collapse="%5C%2C"), '%5D%29%29')
}
if (!is.na(endyear) & is.na(startyear)) { startyear = 1850}
if (is.na(endyear)& !is.na(startyear)) { endyear = format(Sys.Date(), "%Y")}
if (!is.na(startyear) & !is.na(endyear)) {
yearcollectedpart <- paste0("%28%28yearcollected+BETWEEN+%27+",startyear, "%27+AND+%27" , endyear,"%27%29%29") }
parts<- c(if(exists("datasetpart"))datasetpart , if(exists("aphiapart"))aphiapart,
if(exists("mrgpart"))mrgpart,if(exists("yearcollectedpart"))yearcollectedpart )
#### insert a paste collapse function!!!
if(!is.null(parts)){
middlepart <- paste0(parts, collapse="+AND+")} else {
middlepart <- NA
}
wfsurl <-  paste0(wfsprefix, middlepart, wfssuffix)
}
return(wfsurl)
}
test <- createwfsurls(mrgid="5670")
test[1]
createwfsurls <- function (geourl = NA, dasid = NA, aphiaid = NA, mrgid = NA,  startyear = NA, endyear = NA, type="full") {
if (type == "full") {
geolayer = "eurobis-obisenv"
} else if (type == "basic") {
geolayer = "eurobis-obisenv_basic"
}
offset <-seq(from = 0, to =  100000000, by = 20000)
if(any(is.na(geourl)) & any(is.na(dasid)) & any(is.na(aphiaid)) &  any(is.na(mrgid))) {print("please provide geourl dasid or aphiaid")
} else {
# http://geo.vliz.be/geoserver/wfs/ows?service=WFS&version=1.1.0&request=GetFeature&typeName=Dataportal:eurobis-obisenv&resultType=results&viewParams= order: ORDER BY obs.id LIMIT 20000 OFFSET 0 ;where:datasetid IN (5885);context:0100&outputFormat=csv
wfsprefix <-paste0("http://geo.vliz.be/geoserver/wfs/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=Dataportal%3A",geolayer,"&viewParams=%20order:%20ORDER%20BY%20obs.id%20LIMIT%20", offset[2] ,"%20OFFSET%20", trimws(format(offset,digits=9)) ,"%20;where:")
if(!is.na(geourl)) {
if (any(grepl("propertyName", geourl))) {
wfssuffix <- paste0("+AND+",sectioninstring (geourl, starchar="Params=where", n=-15, endchar = "propertyName=", m=2 ),"&outputformat=csv")} else {
wfssuffix <- paste0("+AND+",richtfrom(geourl, 'Params=where',14))
}   } else {
wfssuffix <-"&outputformat=csv"
}
if (any(!is.na(dasid)))  { datasetpart <- paste0('datasetid+IN+%28',
paste0(dasid, collapse="%5C%2C"), '%29')  }
if (any(!is.na(aphiaid))) {
aphiapart1 <- paste0('aphiaid+IN+%28',
paste0(aphiaid, collapse="%5C%2C"), '%29')
aphiapart2 <- paste0('aphiaidaccepted+IN+%28',
paste0(aphiaid, collapse="%5C%2C"), '%29')
aphiapart <- paste0("(",aphiapart1, "+OR+",aphiapart2, ")")
}
if (any(!is.na(mrgid))) {
mrgpart <- paste0('%28%28up.geoobjectsids+%26%26+ARRAY%5B',
paste0(mrgid, collapse="%5C%2C"), '%5D%29%29')
}
if (!is.na(endyear) & is.na(startyear)) { startyear = 1850}
if (is.na(endyear)& !is.na(startyear)) { endyear = format(Sys.Date(), "%Y")}
if (!is.na(startyear) & !is.na(endyear)) {
yearcollectedpart <- paste0("%28%28yearcollected+BETWEEN+%27+",startyear, "%27+AND+%27" , endyear,"%27%29%29") }
parts<- c(if(exists("datasetpart"))datasetpart , if(exists("aphiapart"))aphiapart,
if(exists("mrgpart"))mrgpart,if(exists("yearcollectedpart"))yearcollectedpart )
#### insert a paste collapse function!!!
if(!is.null(parts)){
middlepart <- paste0(parts, collapse="+AND+")} else {
middlepart <- NA
}
wfsurl <-  paste0(wfsprefix, middlepart, wfssuffix)
}
return(wfsurl)
}
test <- createwfsurls(mrgid="5670")
test[1]
test <- createwfsurls(mrgid="5670", dasid = "2202")
test[1]
test <- createwfsurls(mrgid="5670", dasid = "2202", aphiaid = "101264")
test[1]
test <- createwfsurls(mrgid=c("5670","3315"), dasid = "2202", aphiaid = "101264")
test[1]
library("devtools")
library("roxygen2")
getwd()
document()
setwd("..")
install("REMODBio")
require("REMODBio")
document()
setwd("./REMODBio")
document()
setwd("..")
install("REMODBio")
getemodbiodata(dasid = "4662")
getemodbiodata(mrgid="3315")
test <- getemodbiodata(mrgid=c("5670","3315"), dasid = "2202", aphiaid = "101264")
test <- getemodbiodata(geourl = "http://geo.vliz.be/geoserver/wfs/ows?service=WFS&version=1.1.0&request=GetFeature&typeName=Dataportal%3Aeurobis-obisenv_basic&resultType=results&viewParams=where%3Adatasetid+IN+%285819%29%3Bcontext%3A0100&propertyName=datasetid%2Cdatecollected%2Cdecimallatitude%2Cdecimallongitude%2Ccoordinateuncertaintyinmeters%2Cscientificname%2Caphiaid%2Cscientificnameaccepted&outputFormat=csv")
test$meta
View(test$meta)
View(test$data)
View(test$datasets)
View(test$data)
test <- getemodbiodata(dasid = "5819", aphiaid = "127530")
View(test$meta)
test <- getemodbiodata(mrgid=c("5670"))
View(test$meta)
test <- getemodbiodata(mrgid=c("5670"), dasid = "4477")
test <- getemodbiodata(mrgid=c("5670"), dasid = c("4477","2202")
)
test <- getemodbiodata(mrgid=c("5670"), dasid = c("4477","2202"), aphiaid = "127530")
test <- getemodbiodata(mrgid=c("5670"), dasid = c("4477","2202"))
View(test$data)
test <- getemodbiodata(mrgid=c("5670"), dasid = c("4477","2202"), aphiaid = "101195")
View(test$data)
test <- getemodbiodata(mrgid=c("5670"), dasid = c("4477","2202"), aphiaid = "101195", endyear = "2016" )
View(test$data)
test <- getemodbiodata(mrgid=c("5670"), dasid = c("4477","2202"), aphiaid = "101195",startyear = "1999", endyear = "2016" )
View(test$data)
View(test$data)
test <- getemodbiodata(mrgid=c("5670"), dasid = c("4477","2202"), aphiaid = "101195",startyear = "1999", endyear = "2016", geourl = "http://geo.vliz.be/geoserver/wfs/ows?service=WFS&version=1.1.0&request=GetFeature&typeName=Dataportal%3Aeurobis-obisenv_basic&resultType=results&viewParams=where%3Adatasetid+IN+%282202%29%3Bcontext%3A0100&propertyName=datasetid%2Cdatecollected%2Cdecimallatitude%2Cdecimallongitude%2Ccoordinateuncertaintyinmeters%2Cscientificname%2Caphiaid%2Cscientificnameaccepted&outputFormat=csv" )
View(test$data)
functionsandpositions <- read.csv("C:/Users/daphnisd/Desktop/R packages/Data manipulations/maps/functionalgroupandcoords.csv", stringsAsFactors = FALSE) %>% mutate(uniqueid = row_number(),
geoobjectsids = str_replace(geoobjectsids, "\\[", "" ),
geoobjectsids = str_replace(geoobjectsids, "\\]", "" )
)
require(dplyr)
require(tidyr)
require(stringr)
functionsandpositions <- read.csv("C:/Users/daphnisd/Desktop/R packages/Data manipulations/maps/functionalgroupandcoords.csv", stringsAsFactors = FALSE) %>% mutate(uniqueid = row_number(),
geoobjectsids = str_replace(geoobjectsids, "\\[", "" ),
geoobjectsids = str_replace(geoobjectsids, "\\]", "" )
)
withduplicates <- functionsandpositions %>%
mutate(geoobjectsids = strsplit(as.character(geoobjectsids), ",")) %>%
unnest(geoobjectsids) %>% mutate( geoobjectsids = trimws(geoobjectsids))
library(mregions)
rnames <- mr_names("MarineRegions:iho") %>% dplyr::select(mrgid, name)
onlyIHO <- withduplicates %>% inner_join (rnames, by = c("geoobjectsids" = "mrgid"))
ihoinemodnet <- onlyIHO %>% dplyr::select (name, geoobjectsids) %>% distinct()
ihoinemodnet
ihoinemodnet <- onlyIHO %>% dplyr::select (geoobjectsids = mrgid, name) %>% distinct()
ihoinemodnet <- onlyIHO %>% dplyr::select (mrgid = geoobjectsids, name) %>% distinct()
ihoinemodnet
getihoareas <- ihoinemodnet
use_data(IHOareas, overwrite = TRUE)HO
IHOareas <- ihoinemodnet
use_data(IHOareas, overwrite = TRUE)HO
use_data(IHOareas, overwrite = TRUE)
View(ihoinemodnet)
setwd("./REMODBio")
use_data(IHOareas, overwrite = TRUE)
document()
setwd("..")
install("REMODBio")
require("REMODBio")
setwd("./REMODBio")
document()
setwd("..")
install("REMODBio")
